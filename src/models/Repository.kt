package models

import com.google.gson.JsonObject
import org.jetbrains.exposed.sql.*

object Repository : Table("repository"){
    val id: Column<Int> = integer("id").primaryKey()
    val node_id: Column<String> = varchar("node_id", 300)
    val name: Column<String> = varchar("name", 300)
    val full_name: Column<String> = varchar("full_name", 300)
    val private: Column<Boolean> = bool("private")
    var owner: Column<Int> = integer("owner").references(User.id)
    val html_url: Column<String> = varchar("html_url", 300)
    val description: Column<String> = varchar("description", 300)
    val fork: Column<Boolean> = bool("fork")
    val url: Column<String> = varchar("url", 300)
    val forks_url: Column<String> = varchar("forks_url", 300)
    val keys_url: Column<String> = varchar("keys_url", 300)
    val collaborators_url: Column<String> = varchar("collaborators_url", 300)
    val teams_url: Column<String> = varchar("teams_url", 300)
    val hooks_url: Column<String> = varchar("hooks_url", 300)
    val issue_events_url: Column<String> = varchar("issue_events_url", 300)
    val events_url: Column<String> = varchar("events_url", 300)
    val assignees_url: Column<String> = varchar("assignees_url", 300)
    val branches_url: Column<String> = varchar("branches_url", 300)
    val tags_url: Column<String> = varchar("tags_url", 300)
    val blobs_url: Column<String> = varchar("blobs_url", 300)
    val git_tags_url: Column<String> = varchar("git_tags_url", 300)
    val git_refs_url: Column<String> = varchar("git_refs_url", 300)
    val trees_url: Column<String> = varchar("trees_url", 300)
    val statuses_url: Column<String> = varchar("statuses_url", 300)
    val languages_url: Column<String> = varchar("languages_url", 300)
    val stargazers_url: Column<String> = varchar("stargazers_url", 300)
    val contributors_url: Column<String> = varchar("contributors_url", 300)
    val subscribers_url: Column<String> = varchar("subscribers_url", 300)
    val subscription_url: Column<String> = varchar("subscription_url", 300)
    val commits_url: Column<String> = varchar("commits_url", 300)
    val git_commits_url: Column<String> = varchar("git_commits_url", 300)
    val comments_url: Column<String> = varchar("comments_url", 300)
    val issue_comment_url: Column<String> = varchar("issue_comment_url", 300)
    val contents_url: Column<String> = varchar("contents_url", 300)
    val compare_url: Column<String> = varchar("compare_url", 300)
    val merges_url: Column<String> = varchar("merges_url", 300)
    val archive_url: Column<String> = varchar("archive_url", 300)
    val downloads_url: Column<String> = varchar("downloads_url", 300)
    val issues_url: Column<String> = varchar("issues_url", 300)
    val pulls_url: Column<String> = varchar("pulls_url", 300)
    val milestones_url: Column<String> = varchar("milestones_url", 300)
    val notifications_url: Column<String> = varchar("notifications_url", 300)
    val labels_url: Column<String> = varchar("labels_url", 300)
    val releases_url: Column<String> = varchar("releases_url", 300)
    val deployments_url: Column<String> = varchar("deployments_url", 300)
    val created_at: Column<String> = varchar("created_at", 300)
    val updated_at: Column<String> = varchar("updated_at", 300)
    val pushed_at: Column<String> = varchar("pushed_at", 300)
    val git_url: Column<String> = varchar("git_url", 300)
    val ssh_url: Column<String> = varchar("ssh_url", 300)
    val clone_url: Column<String> = varchar("clone_url", 300)
    val svn_url: Column<String> = varchar("svn_url", 300)
    val homepage: Column<String> = varchar("homepage", 300)
    val size: Column<Int> = integer("size")
    val stargazers_count: Column<Int> = integer("stargazers_count")
    val watchers_count: Column<Int> = integer("watchers_count")
    val language: Column<String> = varchar("language", 300)
    val has_issues: Column<Boolean> = bool("has_issues")
    val has_projects: Column<Boolean> = bool("has_projects")
    val has_downloads: Column<Boolean> = bool("has_downloads")
    val has_wiki: Column<Boolean> = bool("has_wiki")
    val has_pages: Column<Boolean> = bool("has_pages")
    val forks_count: Column<Int> = integer("forks_count")
    val mirror_url: Column<String> = varchar("mirror_url", 300)
    val archived: Column<Boolean> = bool("archived")
    val open_issues_count: Column<Int> = integer("open_issues_count")
    val license: Column<String> = varchar("license", 300)
    val forks: Column<String> = varchar("forks", 300)
    val open_issues: Column<String> = varchar("open_issues", 300)
    val watchers: Column<Int> = integer("watchers")
    val default_branch: Column<String> = varchar("default_branch", 300)

    fun montarInserirRepository(dados: JsonObject, idOwner: Int) {
        Repository.insertIgnore {
            it[id] = dados["id"].asInt
            it[node_id] = dados["node_id"].toString()
            it[name] = dados["name"].toString()
            it[full_name] = dados["full_name"].toString()
            it[private] = dados["private"].asBoolean
            it[owner] = idOwner
            it[html_url] = dados["html_url"].toString()
            it[description] = dados["description"].toString()
            it[fork] = dados["fork"].asBoolean
            it[url] = dados["url"].toString()
            it[forks_url] = dados["forks_url"].toString()
            it[keys_url] = dados["keys_url"].toString()
            it[collaborators_url] = dados["collaborators_url"].toString()
            it[teams_url] = dados["teams_url"].toString()
            it[hooks_url] = dados["hooks_url"].toString()
            it[issue_events_url] = dados["issue_events_url"].toString()
            it[events_url] = dados["events_url"].toString()
            it[assignees_url] = dados["assignees_url"].toString()
            it[branches_url] = dados["branches_url"].toString()
            it[tags_url] = dados["tags_url"].toString()
            it[blobs_url] = dados["blobs_url"].toString()
            it[git_tags_url] = dados["git_tags_url"].toString()
            it[git_refs_url] = dados["git_refs_url"].toString()
            it[trees_url] = dados["trees_url"].toString()
            it[statuses_url] = dados["statuses_url"].toString()
            it[languages_url] = dados["languages_url"].toString()
            it[stargazers_url] = dados["stargazers_url"].toString()
            it[contributors_url] = dados["contributors_url"].toString()
            it[subscribers_url] = dados["subscribers_url"].toString()
            it[subscription_url] = dados["subscription_url"].toString()
            it[commits_url] = dados["commits_url"].toString()
            it[git_commits_url] = dados["git_commits_url"].toString()
            it[comments_url] = dados["comments_url"].toString()
            it[issue_comment_url] = dados["issue_comment_url"].toString()
            it[contents_url] = dados["contents_url"].toString()
            it[compare_url] = dados["compare_url"].toString()
            it[merges_url] = dados["merges_url"].toString()
            it[archive_url] = dados["archive_url"].toString()
            it[downloads_url] = dados["downloads_url"].toString()
            it[issues_url] = dados["issues_url"].toString()
            it[pulls_url] = dados["pulls_url"].toString()
            it[milestones_url] = dados["milestones_url"].toString()
            it[notifications_url] = dados["notifications_url"].toString()
            it[labels_url] = dados["labels_url"].toString()
            it[releases_url] = dados["releases_url"].toString()
            it[deployments_url] = dados["deployments_url"].toString()
            it[created_at] = dados["created_at"].toString()
            it[updated_at] = dados["updated_at"].toString()
            it[pushed_at] = dados["pushed_at"].toString()
            it[git_url] = dados["git_url"].toString()
            it[ssh_url] = dados["ssh_url"].toString()
            it[clone_url] = dados["clone_url"].toString()
            it[svn_url] = dados["svn_url"].toString()
            it[homepage] = dados["homepage"].toString()
            it[size] = dados["size"].asInt
            it[stargazers_count] = dados["stargazers_count"].asInt
            it[watchers_count] = dados["watchers_count"].asInt
            it[language] = dados["language"].toString()
            it[has_issues] = dados["has_issues"].asBoolean
            it[has_projects] = dados["has_projects"].asBoolean
            it[has_downloads] = dados["has_downloads"].asBoolean
            it[has_wiki] = dados["has_wiki"].asBoolean
            it[has_pages] = dados["has_pages"].asBoolean
            it[forks_count] = dados["forks_count"].asInt
            it[mirror_url] = dados["mirror_url"].toString()
            it[archived] = dados["archived"].asBoolean
            it[open_issues_count] = dados["open_issues_count"].asInt
            it[license] = dados["license"].toString()
            it[forks] = dados["forks"].toString()
            it[open_issues] = dados["open_issues"].toString()
            it[watchers] = dados["watchers"].asInt
            it[default_branch] = dados["default_branch"].toString()
        }
    }
}